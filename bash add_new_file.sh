#!/bin/bash

# Step 1: Navigate to your project directory
cd /path/to/your/dcm4chee-arc-light || { echo "Project path not found"; exit 1; }

# Step 2: Create a new file (Example: newfile.java or newfile.py depending on your project type)
echo "// This is a new file for SonarQube analysis testing" > newfile.java

# Step 3: Add the file to Git
git add newfile.java

# Step 4: Commit the changes
git commit -m "Added newfile.java for SonarQube test"

# Step 5: Push to GitHub
git push origin master

my-github-project/
│
├── src/                         # Your main source code
│   └── mymodule/
│       └── file.py
│
├── tests/                       # Your test code
│   └── test_file.py
│
├── coverage.xml                 # Generated by coverage tool (Python)
├── sonar-project.properties     # SonarQube config file
├── requirements.txt
└── README.md


# Step 6: Ensure the SonarQube analysis properties are configured correctly
echo "sonar.projectKey=dcm4chee-light" > sonar-project.properties
echo "sonar.projectName=dcm4chee-light" >> sonar-project.properties
echo "sonar.projectVersion=1.0" >> sonar-project.properties
echo "sonar.sources=." >> sonar-project.properties
echo "sonar.language=java" >> sonar-project.properties  # Change if needed
echo "sonar.sourceEncoding=UTF-8" >> sonar-project.properties
echo "sonar.tests=." >> sonar-project.properties

# Step 7: Run SonarQube scanner
sonar-scanner

# Step 8: Print a success message
echo "✅ New file added successfully, and SonarQube analysis passed!"


python-sonarqube-project/
├── calculator.py
├── test_calculator.py
├── requirements.txt
├── sonar-project.properties
└── Jenkinsfile

sonar.projectKey=dcm4chee-light       # Unique key for your project in SonarQube
sonar.projectName=dcm4chee-light    # Friendly name displayed in SonarQube
sonar.projectVersion=1.0                # Your project version

sonar.sources=src                       # Folder containing source code
sonar.language=java                     # Replace with your language (e.g., java, py, js)
sonar.sourceEncoding=UTF-8

# Optional for test coverage if using coverage.py (Python) or JaCoCo (Java)
sonar.python.coverage.reportPaths=coverage.xml

 
# Required basic information
sonar.projectKey=dcm4chee-light
sonar.projectName=dcm4chee-light
sonar.projectVersion=1.0

# Path to source code (relative to project root)
sonar.sources=src

# Path to test code (optional but helpful)
sonar.tests=tests

# Encoding of your source files
sonar.sourceEncoding=UTF-8

# Programming language (adjust based on your project)
# sonar.language is deprecated in latest versions, don't include unless needed
# sonar.language=python / java / js

# Path to coverage report (adjust depending on your tool and language)
# Example: Python coverage
sonar.python.coverage.reportPaths=coverage.xml

# Example: Java with JaCoCo
# sonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml

# Example: JavaScript with Jest or nyc
# sonar.javascript.lcov.reportPaths=coverage/lcov.info
